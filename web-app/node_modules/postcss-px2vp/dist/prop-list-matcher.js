"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPropListMatcher = exports.filterPropList = void 0;
exports.filterPropList = {
    exact: function (list) {
        return list.filter(function (m) {
            return m.match(/^[^\*\!]+$/);
        });
    },
    contain: function (list) {
        return list
            .filter(function (m) {
            return m.match(/^\*.+\*$/);
        })
            .map(function (m) {
            return m.substr(1, m.length - 2);
        });
    },
    endWith: function (list) {
        return list
            .filter(function (m) {
            return m.match(/^\*[^\*]+$/);
        })
            .map(function (m) {
            return m.substr(1);
        });
    },
    startWith: function (list) {
        return list
            .filter(function (m) {
            return m.match(/^[^\*\!]+\*$/);
        })
            .map(function (m) {
            return m.substr(0, m.length - 1);
        });
    },
    notExact: function (list) {
        return list
            .filter(function (m) {
            return m.match(/^\![^\*].*$/);
        })
            .map(function (m) {
            return m.substr(1);
        });
    },
    notContain: function (list) {
        return list
            .filter(function (m) {
            return m.match(/^\!\*.+\*$/);
        })
            .map(function (m) {
            return m.substr(2, m.length - 3);
        });
    },
    notEndWith: function (list) {
        return list
            .filter(function (m) {
            return m.match(/^\!\*[^\*]+$/);
        })
            .map(function (m) {
            return m.substr(2);
        });
    },
    notStartWith: function (list) {
        return list
            .filter(function (m) {
            return m.match(/^\![^\*]+\*$/);
        })
            .map(function (m) {
            return m.substr(1, m.length - 2);
        });
    }
};
const matcherMap = new Map();
function _createPropListMatcher(propList) {
    var hasWild = propList.indexOf('*') > -1;
    var matchAll = hasWild && propList.length === 1;
    var lists = {
        exact: exports.filterPropList.exact(propList),
        contain: exports.filterPropList.contain(propList),
        startWith: exports.filterPropList.startWith(propList),
        endWith: exports.filterPropList.endWith(propList),
        notExact: exports.filterPropList.notExact(propList),
        notContain: exports.filterPropList.notContain(propList),
        notStartWith: exports.filterPropList.notStartWith(propList),
        notEndWith: exports.filterPropList.notEndWith(propList)
    };
    return function (prop) {
        if (matchAll)
            return true;
        return ((hasWild ||
            lists.exact.indexOf(prop) > -1 ||
            lists.contain.some(function (m) {
                return prop.indexOf(m) > -1;
            }) ||
            lists.startWith.some(function (m) {
                return prop.indexOf(m) === 0;
            }) ||
            lists.endWith.some(function (m) {
                return prop.indexOf(m) === prop.length - m.length;
            })) &&
            !(lists.notExact.indexOf(prop) > -1 ||
                lists.notContain.some(function (m) {
                    return prop.indexOf(m) > -1;
                }) ||
                lists.notStartWith.some(function (m) {
                    return prop.indexOf(m) === 0;
                }) ||
                lists.notEndWith.some(function (m) {
                    return prop.indexOf(m) === prop.length - m.length;
                })));
    };
}
function createPropListMatcher(propList) {
    const key = propList.join(',');
    if (!matcherMap.has(key))
        matcherMap.set(key, _createPropListMatcher(propList));
    return matcherMap.get(key);
}
exports.createPropListMatcher = createPropListMatcher;
//# sourceMappingURL=prop-list-matcher.js.map