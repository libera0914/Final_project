{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { message } from \"ant-design-vue\";\n/**\n * @description 系统提示\n * @param {string} msg 提示信息\n */\nexport function toast(msg) {\n  message.success(msg);\n}\ntoast.fail = msg => {\n  return message.error(msg);\n};\n\n/**\n * @description: 初始化默认起始时间\n * @param {Object} 时间 (moment对象)\n * @returns\n */\nexport function formatStartTime(time) {\n  if (time._isAMomentObject) {\n    return time.format(\"YYYY-MM-DD\") + \" 00:00:00\";\n  } else {\n    return time + \" 00:00:00\";\n  }\n}\n\n/**\n * @description: 初始化默认结束时间\n * @param {Object} 时间 (moment对象)\n * @returns\n */\nexport function formatEndTime(time) {\n  if (time._isAMomentObject) {\n    return time.format(\"YYYY-MM-DD\") + \" 23:59:59\";\n  } else {\n    return time + \" 23:59:59\";\n  }\n}\n\n/**\n * @description: 数组转树\n * @param {Array} data \n * @param {string} mid 自身id的字段名\n * @param {string} pid 父级id的字段名\n * @param {string} c 子类集合的字段名\n * @returns \n */\nexport function ArrayToTree(array, mid = \"id\", pid = \"parentId\", c = \"children\") {\n  const newList = [];\n  for (let i = 0; i < array.length; i++) {\n    if (!array[i].parentId) {\n      //获取最顶层元素，它的父节点ID=0\n      newList.push(array[i]);\n    } else {\n      const parent = array.find(item => item[mid] === array[i][pid]); // 获取当前节点的父节点\n      if (parent) {\n        // 把当前节点 加入到 父节点中\n        if (parent[c]) {\n          parent[c].push(array[i]);\n        } else {\n          parent[c] = [array[i]];\n        }\n      }\n    }\n  }\n  return newList;\n}\n\n/**\n* @description: 树转数组\n* @param {*} tree \n* @returns \n*/\nexport function TreeToArray(tree) {\n  // 判断 tree 是否有值，无返回 []\n  if (!Array.isArray(tree) || !tree.length) return [];\n  let res = [];\n  tree.forEach(v => {\n    // tree的每个元素都 放入到 res里面\n    res.push(v);\n    if (v.children) {\n      // 有children 就把 children数据递归 返回  依次放到 res里面\n      res.push(...TreeToArray(v.children));\n    }\n  });\n  return res;\n}","map":{"version":3,"names":["message","toast","msg","success","fail","error","formatStartTime","time","_isAMomentObject","format","formatEndTime","ArrayToTree","array","mid","pid","c","newList","i","length","parentId","push","parent","find","item","TreeToArray","tree","Array","isArray","res","forEach","v","children"],"sources":["E:/项目/考文垂/code/web-app/src/utils/util.js"],"sourcesContent":["import { message } from \"ant-design-vue\";\n/**\n * @description 系统提示\n * @param {string} msg 提示信息\n */\nexport function toast(msg) {\n  message.success(msg);\n}\ntoast.fail = (msg) => {\n  return message.error(msg);\n};\n\n/**\n * @description: 初始化默认起始时间\n * @param {Object} 时间 (moment对象)\n * @returns\n */\nexport function formatStartTime(time) {\n  if (time._isAMomentObject) {\n    return time.format(\"YYYY-MM-DD\") + \" 00:00:00\";\n  } else {\n    return time + \" 00:00:00\";\n  }\n}\n\n/**\n * @description: 初始化默认结束时间\n * @param {Object} 时间 (moment对象)\n * @returns\n */\nexport function formatEndTime(time) {\n  if (time._isAMomentObject) {\n    return time.format(\"YYYY-MM-DD\") + \" 23:59:59\";\n  } else {\n    return time + \" 23:59:59\";\n  }\n}\n\n/**\n * @description: 数组转树\n * @param {Array} data \n * @param {string} mid 自身id的字段名\n * @param {string} pid 父级id的字段名\n * @param {string} c 子类集合的字段名\n * @returns \n */\nexport function ArrayToTree(array, mid = \"id\", pid = \"parentId\", c = \"children\") {\n  const newList = []\n  for (let i = 0; i < array.length; i++) {\n      if (!array[i].parentId) { //获取最顶层元素，它的父节点ID=0\n          newList.push(array[i])\n      } else {\n          const parent = array.find(item => item[mid] === array[i][pid])  // 获取当前节点的父节点\n          if (parent) {\n              // 把当前节点 加入到 父节点中\n              if (parent[c]) {\n                  parent[c].push(array[i])\n              } else {\n                  parent[c] = [array[i]]\n              }\n          }\n      }\n  }\n  return newList\n}\n\n/**\n* @description: 树转数组\n* @param {*} tree \n* @returns \n*/\nexport function TreeToArray(tree) {\n  // 判断 tree 是否有值，无返回 []\n  if (!Array.isArray(tree) || !tree.length) return []\n  let res = []\n  tree.forEach(v => {\n      // tree的每个元素都 放入到 res里面\n      res.push(v)\n      if (v.children) {\n          // 有children 就把 children数据递归 返回  依次放到 res里面\n          res.push(...TreeToArray(v.children))\n      }\n  })\n  return res\n}\n\n"],"mappings":";AAAA,SAASA,OAAO,QAAQ,gBAAgB;AACxC;AACA;AACA;AACA;AACA,OAAO,SAASC,KAAK,CAACC,GAAG,EAAE;EACzBF,OAAO,CAACG,OAAO,CAACD,GAAG,CAAC;AACtB;AACAD,KAAK,CAACG,IAAI,GAAIF,GAAG,IAAK;EACpB,OAAOF,OAAO,CAACK,KAAK,CAACH,GAAG,CAAC;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,eAAe,CAACC,IAAI,EAAE;EACpC,IAAIA,IAAI,CAACC,gBAAgB,EAAE;IACzB,OAAOD,IAAI,CAACE,MAAM,CAAC,YAAY,CAAC,GAAG,WAAW;EAChD,CAAC,MAAM;IACL,OAAOF,IAAI,GAAG,WAAW;EAC3B;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,aAAa,CAACH,IAAI,EAAE;EAClC,IAAIA,IAAI,CAACC,gBAAgB,EAAE;IACzB,OAAOD,IAAI,CAACE,MAAM,CAAC,YAAY,CAAC,GAAG,WAAW;EAChD,CAAC,MAAM;IACL,OAAOF,IAAI,GAAG,WAAW;EAC3B;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,WAAW,CAACC,KAAK,EAAEC,GAAG,GAAG,IAAI,EAAEC,GAAG,GAAG,UAAU,EAAEC,CAAC,GAAG,UAAU,EAAE;EAC/E,MAAMC,OAAO,GAAG,EAAE;EAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,IAAI,CAACL,KAAK,CAACK,CAAC,CAAC,CAACE,QAAQ,EAAE;MAAE;MACtBH,OAAO,CAACI,IAAI,CAACR,KAAK,CAACK,CAAC,CAAC,CAAC;IAC1B,CAAC,MAAM;MACH,MAAMI,MAAM,GAAGT,KAAK,CAACU,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACV,GAAG,CAAC,KAAKD,KAAK,CAACK,CAAC,CAAC,CAACH,GAAG,CAAC,CAAC,EAAE;MAChE,IAAIO,MAAM,EAAE;QACR;QACA,IAAIA,MAAM,CAACN,CAAC,CAAC,EAAE;UACXM,MAAM,CAACN,CAAC,CAAC,CAACK,IAAI,CAACR,KAAK,CAACK,CAAC,CAAC,CAAC;QAC5B,CAAC,MAAM;UACHI,MAAM,CAACN,CAAC,CAAC,GAAG,CAACH,KAAK,CAACK,CAAC,CAAC,CAAC;QAC1B;MACJ;IACJ;EACJ;EACA,OAAOD,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,WAAW,CAACC,IAAI,EAAE;EAChC;EACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,IAAI,CAACA,IAAI,CAACP,MAAM,EAAE,OAAO,EAAE;EACnD,IAAIU,GAAG,GAAG,EAAE;EACZH,IAAI,CAACI,OAAO,CAACC,CAAC,IAAI;IACd;IACAF,GAAG,CAACR,IAAI,CAACU,CAAC,CAAC;IACX,IAAIA,CAAC,CAACC,QAAQ,EAAE;MACZ;MACAH,GAAG,CAACR,IAAI,CAAC,GAAGI,WAAW,CAACM,CAAC,CAACC,QAAQ,CAAC,CAAC;IACxC;EACJ,CAAC,CAAC;EACF,OAAOH,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}