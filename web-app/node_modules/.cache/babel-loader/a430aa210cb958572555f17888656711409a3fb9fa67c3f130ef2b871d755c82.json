{"ast":null,"code":"// based on rc-resize-observer 0.1.3\nimport ResizeObserver from 'resize-observer-polyfill';\n\n// Still need to be compatible with React 15, we use class component here\nvar VueResizeObserver = {\n  name: 'ResizeObserver',\n  props: {\n    disabled: Boolean\n  },\n  data: function data() {\n    this.currentElement = null;\n    this.resizeObserver = null;\n    return {\n      width: 0,\n      height: 0\n    };\n  },\n  mounted: function mounted() {\n    this.onComponentUpdated();\n  },\n  updated: function updated() {\n    this.onComponentUpdated();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.destroyObserver();\n  },\n  methods: {\n    onComponentUpdated: function onComponentUpdated() {\n      var disabled = this.$props.disabled;\n\n      // Unregister if disabled\n\n      if (disabled) {\n        this.destroyObserver();\n        return;\n      }\n\n      // Unregister if element changed\n      var element = this.$el;\n      var elementChanged = element !== this.currentElement;\n      if (elementChanged) {\n        this.destroyObserver();\n        this.currentElement = element;\n      }\n      if (!this.resizeObserver && element) {\n        this.resizeObserver = new ResizeObserver(this.onResize);\n        this.resizeObserver.observe(element);\n      }\n    },\n    onResize: function onResize(entries) {\n      var target = entries[0].target;\n      var _target$getBoundingCl = target.getBoundingClientRect(),\n        width = _target$getBoundingCl.width,\n        height = _target$getBoundingCl.height;\n      /**\n       * Resize observer trigger when content size changed.\n       * In most case we just care about element size,\n       * let's use `boundary` instead of `contentRect` here to avoid shaking.\n       */\n\n      var fixedWidth = Math.floor(width);\n      var fixedHeight = Math.floor(height);\n      if (this.width !== fixedWidth || this.height !== fixedHeight) {\n        var size = {\n          width: fixedWidth,\n          height: fixedHeight\n        };\n        this.width = fixedWidth;\n        this.height = fixedHeight;\n        this.$emit('resize', size);\n      }\n    },\n    destroyObserver: function destroyObserver() {\n      if (this.resizeObserver) {\n        this.resizeObserver.disconnect();\n        this.resizeObserver = null;\n      }\n    }\n  },\n  render: function render() {\n    return this.$slots['default'][0];\n  }\n};\nexport default VueResizeObserver;","map":{"version":3,"names":["ResizeObserver","VueResizeObserver","name","props","disabled","Boolean","data","currentElement","resizeObserver","width","height","mounted","onComponentUpdated","updated","beforeDestroy","destroyObserver","methods","$props","element","$el","elementChanged","onResize","observe","entries","target","_target$getBoundingCl","getBoundingClientRect","fixedWidth","Math","floor","fixedHeight","size","$emit","disconnect","render","$slots"],"sources":["E:/项目/考文垂/code/web-app/node_modules/ant-design-vue/es/vc-resize-observer/index.js"],"sourcesContent":["// based on rc-resize-observer 0.1.3\nimport ResizeObserver from 'resize-observer-polyfill';\n\n// Still need to be compatible with React 15, we use class component here\nvar VueResizeObserver = {\n  name: 'ResizeObserver',\n  props: {\n    disabled: Boolean\n  },\n  data: function data() {\n    this.currentElement = null;\n    this.resizeObserver = null;\n    return {\n      width: 0,\n      height: 0\n    };\n  },\n  mounted: function mounted() {\n    this.onComponentUpdated();\n  },\n  updated: function updated() {\n    this.onComponentUpdated();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.destroyObserver();\n  },\n\n  methods: {\n    onComponentUpdated: function onComponentUpdated() {\n      var disabled = this.$props.disabled;\n\n      // Unregister if disabled\n\n      if (disabled) {\n        this.destroyObserver();\n        return;\n      }\n\n      // Unregister if element changed\n      var element = this.$el;\n      var elementChanged = element !== this.currentElement;\n      if (elementChanged) {\n        this.destroyObserver();\n        this.currentElement = element;\n      }\n\n      if (!this.resizeObserver && element) {\n        this.resizeObserver = new ResizeObserver(this.onResize);\n        this.resizeObserver.observe(element);\n      }\n    },\n    onResize: function onResize(entries) {\n      var target = entries[0].target;\n\n      var _target$getBoundingCl = target.getBoundingClientRect(),\n          width = _target$getBoundingCl.width,\n          height = _target$getBoundingCl.height;\n      /**\n       * Resize observer trigger when content size changed.\n       * In most case we just care about element size,\n       * let's use `boundary` instead of `contentRect` here to avoid shaking.\n       */\n\n\n      var fixedWidth = Math.floor(width);\n      var fixedHeight = Math.floor(height);\n\n      if (this.width !== fixedWidth || this.height !== fixedHeight) {\n        var size = { width: fixedWidth, height: fixedHeight };\n        this.width = fixedWidth;\n        this.height = fixedHeight;\n        this.$emit('resize', size);\n      }\n    },\n    destroyObserver: function destroyObserver() {\n      if (this.resizeObserver) {\n        this.resizeObserver.disconnect();\n        this.resizeObserver = null;\n      }\n    }\n  },\n\n  render: function render() {\n    return this.$slots['default'][0];\n  }\n};\n\nexport default VueResizeObserver;"],"mappings":"AAAA;AACA,OAAOA,cAAc,MAAM,0BAA0B;;AAErD;AACA,IAAIC,iBAAiB,GAAG;EACtBC,IAAI,EAAE,gBAAgB;EACtBC,KAAK,EAAE;IACLC,QAAQ,EAAEC;EACZ,CAAC;EACDC,IAAI,EAAE,SAASA,IAAI,GAAG;IACpB,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,OAAO;MACLC,KAAK,EAAE,CAAC;MACRC,MAAM,EAAE;IACV,CAAC;EACH,CAAC;EACDC,OAAO,EAAE,SAASA,OAAO,GAAG;IAC1B,IAAI,CAACC,kBAAkB,EAAE;EAC3B,CAAC;EACDC,OAAO,EAAE,SAASA,OAAO,GAAG;IAC1B,IAAI,CAACD,kBAAkB,EAAE;EAC3B,CAAC;EACDE,aAAa,EAAE,SAASA,aAAa,GAAG;IACtC,IAAI,CAACC,eAAe,EAAE;EACxB,CAAC;EAEDC,OAAO,EAAE;IACPJ,kBAAkB,EAAE,SAASA,kBAAkB,GAAG;MAChD,IAAIR,QAAQ,GAAG,IAAI,CAACa,MAAM,CAACb,QAAQ;;MAEnC;;MAEA,IAAIA,QAAQ,EAAE;QACZ,IAAI,CAACW,eAAe,EAAE;QACtB;MACF;;MAEA;MACA,IAAIG,OAAO,GAAG,IAAI,CAACC,GAAG;MACtB,IAAIC,cAAc,GAAGF,OAAO,KAAK,IAAI,CAACX,cAAc;MACpD,IAAIa,cAAc,EAAE;QAClB,IAAI,CAACL,eAAe,EAAE;QACtB,IAAI,CAACR,cAAc,GAAGW,OAAO;MAC/B;MAEA,IAAI,CAAC,IAAI,CAACV,cAAc,IAAIU,OAAO,EAAE;QACnC,IAAI,CAACV,cAAc,GAAG,IAAIR,cAAc,CAAC,IAAI,CAACqB,QAAQ,CAAC;QACvD,IAAI,CAACb,cAAc,CAACc,OAAO,CAACJ,OAAO,CAAC;MACtC;IACF,CAAC;IACDG,QAAQ,EAAE,SAASA,QAAQ,CAACE,OAAO,EAAE;MACnC,IAAIC,MAAM,GAAGD,OAAO,CAAC,CAAC,CAAC,CAACC,MAAM;MAE9B,IAAIC,qBAAqB,GAAGD,MAAM,CAACE,qBAAqB,EAAE;QACtDjB,KAAK,GAAGgB,qBAAqB,CAAChB,KAAK;QACnCC,MAAM,GAAGe,qBAAqB,CAACf,MAAM;MACzC;AACN;AACA;AACA;AACA;;MAGM,IAAIiB,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACpB,KAAK,CAAC;MAClC,IAAIqB,WAAW,GAAGF,IAAI,CAACC,KAAK,CAACnB,MAAM,CAAC;MAEpC,IAAI,IAAI,CAACD,KAAK,KAAKkB,UAAU,IAAI,IAAI,CAACjB,MAAM,KAAKoB,WAAW,EAAE;QAC5D,IAAIC,IAAI,GAAG;UAAEtB,KAAK,EAAEkB,UAAU;UAAEjB,MAAM,EAAEoB;QAAY,CAAC;QACrD,IAAI,CAACrB,KAAK,GAAGkB,UAAU;QACvB,IAAI,CAACjB,MAAM,GAAGoB,WAAW;QACzB,IAAI,CAACE,KAAK,CAAC,QAAQ,EAAED,IAAI,CAAC;MAC5B;IACF,CAAC;IACDhB,eAAe,EAAE,SAASA,eAAe,GAAG;MAC1C,IAAI,IAAI,CAACP,cAAc,EAAE;QACvB,IAAI,CAACA,cAAc,CAACyB,UAAU,EAAE;QAChC,IAAI,CAACzB,cAAc,GAAG,IAAI;MAC5B;IACF;EACF,CAAC;EAED0B,MAAM,EAAE,SAASA,MAAM,GAAG;IACxB,OAAO,IAAI,CAACC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;EAClC;AACF,CAAC;AAED,eAAelC,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}