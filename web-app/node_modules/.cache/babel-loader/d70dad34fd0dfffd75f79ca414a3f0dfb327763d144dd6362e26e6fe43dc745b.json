{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @description 默认上传文件组件使用说明方法\n *\n * import UploadFile from \"@/components/uploadFile/index.vue\";\n * components: { UploadFile },\n * <UploadFile v-model=\"fileList\" :maxLength=\"maxLength\"\n * :disabled=\"disabled\" :customApi=\"customApi\"\n * :isShowList=\"isShowList\" :allowFileType=\"allowFileType\"\n * @customRequest=\"customRequest\" />\n *\n * @param {Array} fileList 文件列表 格式: [path,path] | [{url:fileUrl}]\n * @param {Number} maxLength 上传文件的数量的最大值\n * @param {Boolean} disabled 是否禁用\n * @param {Boolean} readOnly 是否只读\n * @param {Boolean} customApi 是否自定义上传接口\n * @param {Boolean} isShowList 是否显示文件上传列表\n * @param {Array} allowFileType 文件上传类型\n *\n * 注：\n * 1. readOnly (是否只读) > disabled (是否禁用)\n * 2. <UploadFile> 在中间添加按钮将会取代默认按钮样式 </UploadFile>\n * 3. customRequest 自定义请求 格式: customRequest(file) {}\n */\nimport { ALLOW_FILE_TYPE, ALLOW_IMAGE_TYPE } from \"@/config/global.config\";\nimport { isArray, isObject, isString } from \"@/utils/validate\";\nexport default {\n  name: \"uploadFile\",\n  props: {\n    // 文件列表\n    fileList: {\n      type: Array,\n      default: () => {\n        return [];\n      }\n    },\n    // 上传文件的数量的最大值\n    maxLength: {\n      type: Number,\n      default: 99\n    },\n    // 是否支持多选文件\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    // 是否禁用\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    // 是否只读\n    readOnly: {\n      type: Boolean,\n      default: false\n    },\n    // 是否自定义上传接口\n    customApi: {\n      type: Boolean,\n      default: false\n    },\n    // 是否显示文件上传列表\n    isShowList: {\n      type: Boolean,\n      default: true\n    },\n    // 文件上传类型\n    allowFileType: {\n      type: Array,\n      default: () => {\n        return [...ALLOW_FILE_TYPE, ...ALLOW_IMAGE_TYPE];\n      }\n    }\n  },\n  data() {\n    return {\n      newFileList: []\n    };\n  },\n  watch: {\n    fileList: {\n      handler(_, newVal) {\n        this.newFileList = this.judgeFileList(newVal);\n      },\n      deep: true\n    }\n  },\n  model: {\n    prop: \"fileList\",\n    event: \"changeFileList\"\n  },\n  computed: {\n    isCustomStyle() {\n      return !!this.$slots.default;\n    }\n  },\n  mounted() {\n    this.newFileList = this.judgeFileList(this.fileList);\n  },\n  methods: {\n    beforeUpload(file) {\n      const {\n        type\n      } = file;\n      if (this.allowFileType.some(item => item == type)) {\n        this.uploadFile(file);\n      } else {\n        this.$toast.fail(\"请上传符合格式要求的文件\");\n      }\n      return false;\n    },\n    /**\n     * @description 上传文件的逻辑\n     * @param {file} file\n     */\n    uploadFile(file) {\n      const {\n        name\n      } = file;\n      if (this.customApi) {\n        this.$emit(\"customRequest\", file);\n      } else {\n        let formData = new FormData();\n        formData.append(\"file\", file);\n        formData.append(\"name\", name);\n        this.$ajax.uploadFile(formData).then(res => {\n          let list = this.fileList;\n          list.push(res);\n          this.$emit(\"changeFileList\", list);\n        });\n      }\n    },\n    /**\n     * @description 根据传入数组的格式初始化文件列表\n     * @param {array} list\n     * @returns {boolean}\n     */\n    judgeFileList(list) {\n      if (!isArray(list) || !list.length) {\n        return [];\n      } else {\n        let val = list[0];\n        if (isObject(val)) {\n          return list;\n        } else if (isString(val)) {\n          return list.map((item, index) => {\n            return {\n              id: 0 - index - 1,\n              name: `文件${index + 1}`,\n              url: item\n            };\n          });\n        } else {\n          return [];\n        }\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAA;EACAC;IACA;IACAC;MACAC;MACAC;QACA;MACA;IACA;IACA;IACAC;MACAF;MACAC;IACA;IACA;IACAE;MACAH;MACAC;IACA;IACA;IACAG;MACAJ;MACAC;IACA;IACA;IACAI;MACAL;MACAC;IACA;IACA;IACAK;MACAN;MACAC;IACA;IACA;IACAM;MACAP;MACAC;IACA;IACA;IACAO;MACAR;MACAC;QACA;MACA;IACA;EACA;EACAQ;IACA;MACAC;IACA;EACA;EACAC;IACAZ;MACAa;QACA;MACA;MACAC;IACA;EACA;EACAC;IACAC;IACAC;EACA;EACAC;IACAC;MACA;IACA;EACA;EACAC;IACA;EACA;EACAC;IACAC;MACA;QAAArB;MAAA;MACA;QACA;MACA;QACA;MACA;MACA;IACA;IAEA;AACA;AACA;AACA;IACAsB;MACA;QAAAzB;MAAA;MACA;QACA;MACA;QACA;QACA0B;QACAA;QACA;UACA;UACAC;UACA;QACA;MACA;IACA;IAEA;AACA;AACA;AACA;AACA;IACAC;MACA;QACA;MACA;QACA;QACA;UACA;QACA;UACA;YACA;cACAC;cACA7B;cACA8B;YACA;UACA;QACA;UACA;QACA;MACA;IACA;EACA;AACA","names":["name","props","fileList","type","default","maxLength","multiple","disabled","readOnly","customApi","isShowList","allowFileType","data","newFileList","watch","handler","deep","model","prop","event","computed","isCustomStyle","mounted","methods","beforeUpload","uploadFile","formData","list","judgeFileList","id","url"],"sourceRoot":"src/components/uploadFile","sources":["index.vue"],"sourcesContent":["<template>\n  <div id=\"uploadFile\">\n    <template v-if=\"!readOnly || !(maxLength < newFileList.length)\">\n      <a-upload\n        name=\"file\"\n        :multiple=\"multiple\"\n        :disabled=\"disabled\"\n        :before-upload=\"beforeUpload\"\n        :showUploadList=\"false\"\n      >\n        <template v-if=\"isCustomStyle\">\n          <slot />\n        </template>\n        <a-button v-else> <a-icon type=\"upload\" /> 上传文件 </a-button>\n      </a-upload>\n    </template>\n    <template v-if=\"isShowList\"></template>\n  </div>\n</template>\n\n<script>\n/**\n * @description 默认上传文件组件使用说明方法\n *\n * import UploadFile from \"@/components/uploadFile/index.vue\";\n * components: { UploadFile },\n * <UploadFile v-model=\"fileList\" :maxLength=\"maxLength\"\n * :disabled=\"disabled\" :customApi=\"customApi\"\n * :isShowList=\"isShowList\" :allowFileType=\"allowFileType\"\n * @customRequest=\"customRequest\" />\n *\n * @param {Array} fileList 文件列表 格式: [path,path] | [{url:fileUrl}]\n * @param {Number} maxLength 上传文件的数量的最大值\n * @param {Boolean} disabled 是否禁用\n * @param {Boolean} readOnly 是否只读\n * @param {Boolean} customApi 是否自定义上传接口\n * @param {Boolean} isShowList 是否显示文件上传列表\n * @param {Array} allowFileType 文件上传类型\n *\n * 注：\n * 1. readOnly (是否只读) > disabled (是否禁用)\n * 2. <UploadFile> 在中间添加按钮将会取代默认按钮样式 </UploadFile>\n * 3. customRequest 自定义请求 格式: customRequest(file) {}\n */\nimport { ALLOW_FILE_TYPE, ALLOW_IMAGE_TYPE } from \"@/config/global.config\";\nimport { isArray, isObject, isString } from \"@/utils/validate\";\nexport default {\n  name: \"uploadFile\",\n  props: {\n    // 文件列表\n    fileList: {\n      type: Array,\n      default: () => {\n        return [];\n      },\n    },\n    // 上传文件的数量的最大值\n    maxLength: {\n      type: Number,\n      default: 99,\n    },\n    // 是否支持多选文件\n    multiple: {\n      type: Boolean,\n      default: false,\n    },\n    // 是否禁用\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    // 是否只读\n    readOnly: {\n      type: Boolean,\n      default: false,\n    },\n    // 是否自定义上传接口\n    customApi: {\n      type: Boolean,\n      default: false,\n    },\n    // 是否显示文件上传列表\n    isShowList: {\n      type: Boolean,\n      default: true,\n    },\n    // 文件上传类型\n    allowFileType: {\n      type: Array,\n      default: () => {\n        return [...ALLOW_FILE_TYPE, ...ALLOW_IMAGE_TYPE];\n      },\n    },\n  },\n  data() {\n    return {\n      newFileList: [],\n    };\n  },\n  watch: {\n    fileList: {\n      handler(_, newVal) {\n        this.newFileList = this.judgeFileList(newVal);\n      },\n      deep: true,\n    },\n  },\n  model: {\n    prop: \"fileList\",\n    event: \"changeFileList\",\n  },\n  computed: {\n    isCustomStyle() {\n      return !!this.$slots.default;\n    },\n  },\n  mounted() {\n    this.newFileList = this.judgeFileList(this.fileList);\n  },\n  methods: {\n    beforeUpload(file) {\n      const { type } = file;\n      if (this.allowFileType.some((item) => item == type)) {\n        this.uploadFile(file);\n      } else {\n        this.$toast.fail(\"请上传符合格式要求的文件\");\n      }\n      return false;\n    },\n\n    /**\n     * @description 上传文件的逻辑\n     * @param {file} file\n     */\n    uploadFile(file) {\n      const { name } = file;\n      if (this.customApi) {\n        this.$emit(\"customRequest\", file);\n      } else {\n        let formData = new FormData();\n        formData.append(\"file\", file);\n        formData.append(\"name\", name);\n        this.$ajax.uploadFile(formData).then((res) => {\n          let list = this.fileList;\n          list.push(res);\n          this.$emit(\"changeFileList\", list);\n        });\n      }\n    },\n\n    /**\n     * @description 根据传入数组的格式初始化文件列表\n     * @param {array} list\n     * @returns {boolean}\n     */\n    judgeFileList(list) {\n      if (!isArray(list) || !list.length) {\n        return [];\n      } else {\n        let val = list[0];\n        if (isObject(val)) {\n          return list;\n        } else if (isString(val)) {\n          return list.map((item, index) => {\n            return {\n              id: 0 - index - 1,\n              name: `文件${index + 1}`,\n              url: item,\n            };\n          });\n        } else {\n          return [];\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"less\" scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}