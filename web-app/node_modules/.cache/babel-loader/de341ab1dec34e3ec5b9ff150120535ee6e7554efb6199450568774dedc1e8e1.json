{"ast":null,"code":"import { LARGESCREENCONFIG } from \"../../config/global.config\";\nexport default {\n  name: \"largeScreen\",\n  data() {\n    return {\n      style: {\n        transform: \"scale(1) translate(-50%, -50%)\",\n        width: `${LARGESCREENCONFIG.width}px`,\n        height: `${LARGESCREENCONFIG.height}px`\n      }\n    };\n  },\n  mounted() {\n    this.setScale();\n    window.onresize = this.Debounce(this.setScale, 1000);\n  },\n  methods: {\n    Debounce: (fn, t) => {\n      const delay = t || 100;\n      let timer;\n      return function () {\n        const args = arguments;\n        if (timer) {\n          clearTimeout(timer);\n        }\n        const context = this;\n        timer = setTimeout(() => {\n          timer = null;\n          fn.apply(context, args);\n        }, delay);\n      };\n    },\n    // 获取放大缩小比例\n    getScale() {\n      const w = (window.innerWidth / LARGESCREENCONFIG.width).toFixed(6);\n      const h = (window.innerHeight / LARGESCREENCONFIG.height).toFixed(6);\n      return w < h ? w : h;\n    },\n    // 设置比例\n    setScale() {\n      this.$set(this.style, \"transform\", `scale(${this.getScale()}) translate(-50%, -50%)`);\n    }\n  }\n};","map":{"version":3,"mappings":"AAOA;AACA;EACAA;EACAC;IACA;MACAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EACAC;IACA;IACAC;EACA;EACAC;IACAC;MACA;MACA;MACA;QACA;QACA;UACAC;QACA;QACA;QACAC;UACAA;UACAC;QACA;MACA;IACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACA;IACAC;MACA,UACA,YACA,aACA,kDACA;IACA;EACA;AACA","names":["name","data","style","transform","width","height","mounted","window","methods","Debounce","clearTimeout","timer","fn","getScale","setScale"],"sourceRoot":"src/layouts/modules","sources":["largeScreen.vue"],"sourcesContent":["<template>\n  <div class=\"screen_bg\" :style=\"style\">\n    <router-view />\n  </div>\n</template>\n\n<script>\nimport { LARGESCREENCONFIG } from \"../../config/global.config\";\nexport default {\n  name: \"largeScreen\",\n  data() {\n    return {\n      style: {\n        transform: \"scale(1) translate(-50%, -50%)\",\n        width: `${LARGESCREENCONFIG.width}px`,\n        height: `${LARGESCREENCONFIG.height}px`,\n      },\n    };\n  },\n  mounted() {\n    this.setScale();\n    window.onresize = this.Debounce(this.setScale, 1000);\n  },\n  methods: {\n    Debounce: (fn, t) => {\n      const delay = t || 100;\n      let timer;\n      return function () {\n        const args = arguments;\n        if (timer) {\n          clearTimeout(timer);\n        }\n        const context = this;\n        timer = setTimeout(() => {\n          timer = null;\n          fn.apply(context, args);\n        }, delay);\n      };\n    },\n    // 获取放大缩小比例\n    getScale() {\n      const w = (window.innerWidth / LARGESCREENCONFIG.width).toFixed(6);\n      const h = (window.innerHeight / LARGESCREENCONFIG.height).toFixed(6);\n      return w < h ? w : h;\n    },\n    // 设置比例\n    setScale() {\n      this.$set(\n        this.style,\n        \"transform\",\n        `scale(${this.getScale()}) translate(-50%, -50%)`\n      );\n    },\n  },\n};\n</script>\n<style lang=\"less\" scoped>\n.screen_bg {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform-origin: 0 0;\n  overflow: hidden;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}